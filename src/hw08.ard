\import Algebra.Meta
\import Arith.Nat
\import Data.Bool
\import Data.List
\import Data.Or
\import Function.Meta
\import Logic (Not)
\import Logic.Meta
\import Meta
\import Paths
\import Paths.Meta
\import hw01 (fac)
\import hw03 (*-comm)
\import hw06 (<->, sublist-consume, sublist-nil, sublist-skip)
\import lect06 (filter)
\import lect08
\import Order.LinearOrder
\open Nat
\open LinearOrder

-- 1. Реализуйте функцию filter и докажите ее корректность, то есть, что выполнены следующие условия:
--    * filter p xs является подсписком xs
--    * Все элементы filter p xs удовлетворяют предикату p
--    * Любой подсписок xs с тем же свойством является подсписком filter p xs

\open hw06 (Sublist, filter-sublist)
\open Sublist
\open NatSemiring (<)

\data AllInList {A : \Type} (p : A -> Bool) (xs : List A) \elim xs
  | nil => all-in-list-nil
  | :: x xs => all-in-list-cons (p x = true) (AllInList p xs)

\func filter-satisfies-p {A : \Type} (p : A -> Bool) (xs : List A) : AllInList p (filter p xs) \elim xs
  | nil => all-in-list-nil
  | a :: xs => cases (p a arg addPath) \with {
    | false, p1 => filter-satisfies-p p xs
    | true, p1 => all-in-list-cons p1 (filter-satisfies-p p xs)
  }

\func filter-includes-satisfying-sublists {A : \Type} (p : A -> Bool) (xs : List A) (l : List A) (sub : l `Sublist` xs) (sat : AllInList p xs) : l `Sublist` filter p xs \elim xs, l, sub, sat
  | nil, nil, sublist-nil, all-in-list-nil => sublist-nil
  | x :: xs, lh :: lt, sublist-consume lh=x sub, all-in-list-cons px=true sat => cases (p x arg addPath) \with {
    | true, px=true' => sublist-consume lh=x $ filter-includes-satisfying-sublists p xs lt sub sat
    | false, px=false => contradiction
  }
  | x :: xs, l, sublist-skip sub, all-in-list-cons p1 sat => cases (p x arg addPath) \with {
    | true, px=true => sublist-skip $ filter-includes-satisfying-sublists p xs l sub sat
    | false, px=false => contradiction
  }

-- 2. Докажите, что Perm l1 l2 тогда и только тогда, когда Insertion.sort l1 = Insertion.sort l2.

\func perm<=>same-sorted {A : Dec} (l1 l2 : List A) : Perm l1 l2 <-> (Insertion.sort l1 = Insertion.sort l2) =>
  (perm=>same-sorted l1 l2, same-sorted=>perm l1 l2)
  \where {
    \func perm=>same-sorted (l1 l2 : List A) (p : Perm l1 l2) : Insertion.sort l1 = Insertion.sort l2 \elim l1, l2, p
      | nil, nil, perm-nil => idp
      | x :: xs, y :: yx, perm-cons x=y perm-tails => pmap2 Insertion.sort.insert x=y $ perm=>same-sorted _ _ perm-tails
      | l1, l2, perm-trans {zs} l1->zs zs->l2 => perm=>same-sorted l1 zs l1->zs *> perm=>same-sorted zs l2 zs->l2
      | x :: (x' :: l3), y :: (y' :: l4), perm-swap p p1 p2 => rewrite (p, p1, p2) $ Insertion.sort-perm.insert-comm y' y $ Insertion.sort l4

    \func same-sorted=>perm (l1 l2 : List A) (p : Insertion.sort l1 = Insertion.sort l2) : Perm l1 l2 =>
      perm-trans (Insertion.sort-perm l1) $ rewrite p $ inv-perm (Insertion.sort-perm l2)

    \func inv-perm {A : \Type} {l1 l2 : List A} (p : Perm l1 l2) : Perm l2 l1 \elim l1, l2, p
      | nil, nil, perm-nil => perm-nil
      | x :: l3, y :: l4, perm-cons p p1 => perm-cons (inv p) $ inv-perm p1
      | l3, l4, perm-trans {zs} p1 p2 => perm-trans (inv-perm p2) (inv-perm p1)
      | x :: (x' :: l3), y :: (y' :: l4), perm-swap p p1 p2 => rewrite (p, p1, p2) $ perm-swap idp idp idp
  }

-- 3. Докажите, что спецификация "результат является перестановкой входа и отсортирован" является полной для функции sort.

\func completeness {A : Dec} (sort : List A -> List A) (l : List A) (p : Perm l (sort l)) (s : Sorted (sort l)) : sort l = Insertion.sort l \elim l
 | nil => perm-of-nil-is-nil nil idp p
 | a :: l => \let | ss => inv $ perm<=>same-sorted.perm=>same-sorted _ _ p
             \in sort-of-sorted-is-id _ s *> ss
  \where {
    \func perm-of-nil-is-nil {list : List A}  (isNil : List A) (indeedIsNill : isNil = nil) (perm : Perm isNil list) : list = nil
      | nil, nil, indeedIsNill, perm-nil => idp
      | nil, x :: isNil, (), perm
      | y :: list, x :: isNil, (), perm
      | list, isNil, idp, perm-trans {zs} perm1 perm2 => \let
        | zs=nil => perm-of-nil-is-nil isNil idp perm1
        | list=zs => perm-of-nil-is-nil zs zs=nil perm2
        \in list=zs

    \func sort-of-sorted-is-id (list : List A) (s : Sorted list) : list = Insertion.sort list \elim list, s
      | nil, sorted-nil => idp
      | x :: list, sorted-cons x<=head s => rewriteI (sort-of-sorted-is-id list s) $ insert-evaluates-trivially x list s x<=head
      \where {
        \func insert-evaluates-trivially {A : Dec} (x : A) (list : List A) (s : Sorted list) (x<=head : x <= headDef x list) : x :: list = Insertion.sort.insert x list =>
          cases (list arg addPath) \with {
            | nil, _ => idp
            | y :: list', pppp => insert-evaluates-trivially-lemma x y list' (rewriteF pppp x<=head)
          }
          \where {
            \func insert-evaluates-trivially-lemma {A : Dec} (x : A) (y : A) (list' : List A) (x<=y : x <= y) : x :: y :: list' = (\case dec<_<= y x \with {
              | inl _ => y :: Insertion.sort.insert x list'
              | inr _ => x :: y :: list'
            }) => rewrite (dec<=_reduce x<=y) idp
          }
      }
  }

-- 4. Определите факториал через хвостовую рекурсию.
--    Докажите, что он равен обычному определению факториала.

\func factTail (n : Nat) : Nat => factAcc n 1
  \where {
    \func factAcc (n : Nat) (acc : Nat) : Nat \elim n
      | zero => acc
      | suc n => factAcc n (acc * suc n)
  }

\func factTail-correct : factTail = fac => ext $ (\lam n => evaluate n 1 *> *-comm)
  \where {
    \func evaluate (n : Nat) (acc : Nat) : factTail.factAcc n acc = acc * fac n \elim n
      | 0 => idp
      | suc n => \let ind => evaluate n (acc * suc n) \in ind *> rewrite (inv NatSemiring.*-assoc) idp
  }

-- 5. Определите функцию, которая проверяет правильность скобочной последовательности.
--    Докажите ее корректность.

\data Paren | Left | Right

\func isBalanced (xs : List Paren) : Bool => isBalanced-after-descent xs 0
  \where {
    -- The sequence starts at height `descent` and should go down by `descent` nesting levels by the end
    -- While visiting only heights >= 0
    \func isBalanced-after-descent (xs : List Paren) (descent : Nat) : Bool \elim xs, descent
      | nil, 0 => true
      | nil, suc _ => false
      | Left :: xs1, descent => isBalanced-after-descent xs1 (suc descent)
      | Right :: _, 0 => false
      | Right :: xs1, suc descent => isBalanced-after-descent xs1 descent
  }

\data Balanced (xs : List Paren) \with
  | nil => nil-balanced
  | :: Left xs => cons-balanced {ys : List Paren} (Balanced ys) (xs = ys ++ Right :: nil)
  | xs => append-balanced {ys zs : List Paren} (Balanced ys) (Balanced zs) (xs = ys ++ zs)

\func isBalanced-correct (xs : List Paren) : (isBalanced xs = true) <-> Balanced xs => (isBalanced=>Balanced xs (suc $ length xs) linarith, Balanced=>isBalanced xs)
  \where {
    \func isBalanced=>Balanced (xs : List Paren) (more-than-len : Nat) (has-small-len : length xs < more-than-len) (isb : isBalanced xs = true) : Balanced xs \elim xs, more-than-len
      | nil, _ => nil-balanced
      | a :: xs, suc m => \let | (l, r, plb, prb, pls, prs) => parse-first-paren-pair (a :: xs) isb (\lam x => contradiction)
                        | balancedL => isBalanced=>Balanced l m (\let p => <_suc_<= has-small-len \in linarith) plb
                        | balancedR => isBalanced=>Balanced r m (\let p => <_suc_<= has-small-len \in linarith) prb
                        | raw => append-balanced {_} {Left :: l ++ Right :: nil} {r} (cons-balanced {_} balancedL idp) balancedR idp
          \in rewrite (inv $ parse-splits' _ _ _, list-assoc-application _ _) raw
      \where {
        \func parse-first-paren-pair (xs : List Paren) (is-balanced : isBalanced xs = true) (not-nil : Not $ xs = nil)
          : \Sigma (l : List Paren) (r : List Paren)
                   (plb : isBalanced l = true) (prb : isBalanced r = true)
                   (pls : length l < length xs) (prb : length r < length xs)
          \elim xs, is-balanced, not-nil
          | nil, is-balanced, p => contradiction
          | Left :: xs1, is-balanced, p => aux xs1 0 is-balanced
          \where {
            \func aux (xs : List Paren) (target-descent : Nat) (isb : isBalanced.isBalanced-after-descent xs (suc target-descent) = true) :
              \Sigma (l : List Paren) (r : List Paren)
                     (plb : isBalanced.isBalanced-after-descent l target-descent = true) (prb : isBalanced r = true)
                     (pls : length l < suc(length xs)) (prb : length r < suc (length xs))
              | Right :: xs1, 0, isb => (nil, xs1, idp, isb, linarith, linarith)
              | Left :: xs1, target-descent, isb => \let (l, r, plb, prb, pls, prs) => aux xs1 (suc target-descent) isb \in (Left :: l, r, plb, prb, linarith, linarith)
              | Right :: xs1, suc target-descent, isb => \let (l, r, plb, prb, pls, prs) => aux xs1 target-descent isb \in (Right :: l, r, plb, prb, linarith, linarith)
          }

        \func parse-splits' (a : Paren) (xs : List Paren) (isb : isBalanced (a :: xs) = true) : Left :: (parse-first-paren-pair (a :: xs) isb (\lam x => contradiction)).1 ++ Right :: (parse-first-paren-pair (a :: xs) isb (\lam x => contradiction)).2 = (a :: xs)
          | Left, xs1, isb1 => pmap ((::) Left) $ parse-splits xs1 0 isb1

        \func parse-splits (xs : List Paren) (target-descent : Nat) (isb : isBalanced.isBalanced-after-descent xs (suc target-descent) = true)
          : (parse-first-paren-pair.aux xs target-descent isb).1 ++ Right :: (parse-first-paren-pair.aux xs _ isb).2 = xs
          | Left :: xs1, target-descent, isb1 => \let rec => parse-splits xs1 (suc target-descent) isb1 \in pmap ((::) Left) rec
          | Right :: xs1, 0, isb1 => idp
          | Right :: xs1, suc target-descent, isb1 => pmap ((::) Right) $ parse-splits xs1 target-descent isb1

        \func list-assoc-application (xs ys : List Paren) : Left :: xs ++ Right :: ys = (Left :: xs ++ Right :: nil) ++ ys => equation
      }
    \func Balanced=>isBalanced (xs : List Paren) (bal : Balanced xs) : isBalanced xs = true \elim xs, bal
      | nil, nil-balanced => idp
      | Left :: xs1, cons-balanced bal p => rewrite p $ wrapped-isBalanced _ (Balanced=>isBalanced _ bal)
      | xs1, append-balanced {ys} {zs} bal1 bal2 p => rewrite p $ append-is-balanced ys zs (Balanced=>isBalanced ys bal1) (Balanced=>isBalanced zs bal2)
      \where {
        \func append-is-balanced (xs ys : List Paren) (x-bal : isBalanced xs = true) (y-bal : isBalanced ys = true) : isBalanced (xs ++ ys) = true =>
          append-is-balanced-after-descent 0 x-bal y-bal
          \where {
            \func append-is-balanced-after-descent {xs ys : List Paren}
                                                   (descent : Nat)
                                                   (xs-bad : isBalanced.isBalanced-after-descent xs descent = true)
                                                   (ys-bal : isBalanced ys = true)
              : isBalanced.isBalanced-after-descent (xs ++ ys) descent = true
            \elim xs, descent, xs-bad
              | nil, 0, xs-bad => ys-bal
              | Left :: xs1, descent, xs-bad => append-is-balanced-after-descent _ xs-bad ys-bal
              | Right :: xs1, suc descent, xs-bad => append-is-balanced-after-descent _ xs-bad ys-bal
          }

        \func wrapped-isBalanced (ys : List Paren) (bal : isBalanced ys = true) : isBalanced (Left :: (ys ++ Right :: nil)) = true =>
            ++-right-balanced-after-descent-1 ys 0 bal
          \where {
            \func ++-right-balanced-after-descent-1 (xs : List Paren) (descent : Nat) (xs-bal : isBalanced.isBalanced-after-descent xs descent = true)
              : isBalanced.isBalanced-after-descent (xs ++ Right :: nil) (suc descent) = true \elim xs, descent, xs-bal
              | nil, 0, xs-bal => idp
              | nil, suc descent, xs-bal => contradiction
              | Left :: xs1, descent, xs-bal => ++-right-balanced-after-descent-1 xs1 (suc descent) xs-bal
              | Right :: xs1, suc descent, xs-bal => ++-right-balanced-after-descent-1 xs1 descent xs-bal
              | Right :: xs1, 0, xs-bal => contradiction
          }


      }
  }

