\import Algebra.Meta
\import Arith.Nat
\import Data.List
\import Function.Meta
\import Meta
\import Paths
\import Paths.Meta
\import lect03 (+-comm \as +-comm', fileTest, M5)
\open Nat (+, *)

-- 1. Чему равно fileTest (в нормальной форме)? Докажите это.

\func fileTestResult : fileTest = (17, 8, 13, 55, 18, 21) => idp

-- 2. Чему равно M5.t''' (в нормальной форме)? Докажите это.

\func M5t''' : M5.t''' = ((82, 42, 61, 82, 34, 42, 61, 29), 25, (42, 29)) => idp

-- 3. Докажите ассоциативность ++.

\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
  | nil => idp
  | x :: xs => pmap (x :: ) (++-assoc xs ys zs)

-- 4. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | x :: xs => reverse xs ++ x :: nil

-- Это утверждение будет полезно для доказательства.

\func reverse++ {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs \elim xs
  | nil => ++nil-isId (reverse ys)
  | x :: xs =>
    reverse ((x :: xs) ++ ys)                 ==< idp >==
    reverse (x :: (xs ++ ys))                 ==< idp >==
    reverse (xs ++ ys) ++ x :: nil            ==< pmap (\lam l => l ++ x :: nil) (reverse++ xs ys) >==
    (reverse ys ++ reverse xs) ++ x :: nil    ==< ++-assoc (reverse ys) (reverse xs) (x :: nil) >==
    (reverse ys ++ (reverse xs ++ x :: nil))  ==< idp >==
    reverse ys ++ reverse (x :: xs)  `qed

  \where {
    \func ++nil-isId {A : \Type} (l : List A) : l = l ++ nil \elim l
      | nil => idp
      | x :: xs => pmap (x :: ) (++nil-isId xs)
  }

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs \elim xs
  | nil => idp
  | x :: xs =>
    reverse (reverse (x :: xs))                    ==< idp >==
    reverse (reverse xs ++ x :: nil)               ==< reverse++ (reverse xs) (x :: nil) >==
    reverse (x :: nil) ++ reverse (reverse xs)     ==< pmap (\lam l => x :: nil ++ l) (reverse-isInvolutive xs) >==
    x :: xs                                        `qed


-- 5. Докажите дистрибутивность умножения над сложением для натуральных чисел.

-- Helpers with implicit arguments
\import lect03 (+-assoc \as +-assoc')
\func +-assoc {n m k : Nat} : (n + m) + k = n + (m + k) => +-assoc' n m k
\func +-comm {n m : Nat} : n + m = m + n => +-comm' n m

\func rdistr {n m k : Nat} : (m + k) * n = m * n + k * n \elim n
  | zero => idp -- (m + k) * 0 = m * 0 + k * 0
  | suc n => -- pmap {?} (rdistr n m k)
    (m + k) * suc n           ==< idp >== -- Definition of multiplication
    (m + k) * n + (m + k)     ==< later (rewrite rdistr idp) >== -- Induction hypothesis
    (m * n + k * n) + (m + k) ==< +-assoc  >== -- Associativity of addition
    m * n + (k * n + (m + k)) ==< pmap (\lam i => m * n + i) (inv +-assoc) >== -- Associativity of addition
    m * n + ((k * n + m) + k) ==< pmap (\lam i => m * n + (i + k)) (+-comm {k * n} {m}) >== -- Commutativity of addition
    m * n + ((m + k * n) + k) ==< pmap (\lam i => m * n + i) +-assoc >== -- Associativity of addition
    m * n + (m + (k * n + k)) ==< (inv $ +-assoc) >== -- Associativity of addition
    (m * n + m) + (k * n + k) ==< pmap2 (\lam i j => i + j) (distrSuc m n) (distrSuc k n) >==
    (m * suc n) + (k * suc n) `qed
    \where {
        \func distrSuc (m n : Nat) : m * n + m = (m * suc n) => idp
    }

-- Helper lemma to implement ldistr through rdistr
\func *-comm {n m : Nat} : n * m = m * n \elim m
  | zero => inv $ *-comm-zero n
  | suc m =>
    n * suc m ==< idp >==
    n * m + n ==< pmap (\lam i => i + n) *-comm >==
    m * n + n ==< inv *-comm-suc >==
    suc m * n `qed
    \where {
        \func *-comm-zero (n : Nat) : zero * n = zero \elim n
          | zero => idp
          | suc n => *-comm-zero n

        \func *-comm-suc {n m : Nat} : suc n * m = n * m + m \elim m
          | 0 => idp
          | suc m =>
            suc n * suc m ==< idp >==
            suc n * m + n + 1 ==< later (rewrite *-comm-suc idp) >==
            n * m + m + n + 1 ==< later (rewrite +-assoc idp) >==
            n * m + (m + n) + 1 ==< later (rewrite (+-comm {n} {m}) idp) >==
            n * m + (n + m) + 1 ==< later (rewrite +-assoc idp) >==
            n * m + n + m + 1 ==< idp >==
            n * suc m + suc m `qed

    }

-- Apply commutativity to argument and result of `rdistr`
\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k =>
  n * (m + k) ==< *-comm >==
  (m + k) * n ==< rdistr >==
  m * n + k * n ==< pmap2 (\lam i j => i + j) *-comm *-comm >==
  n * m + n * k `qed

-- 6. Определите конгруэнтность для функций двух аргументов через transport.
--    Можно использовать любые функции, определенные через transport.

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  -- NOTE: transitivity can also be defined through transport,so the usage of equational reasoning pattern is legal
  f a b ==< pmap (\lam x => f x b) p >==  -- The same applies to pmap
  f a' b ==< pmap (\lam x => f a' x) q >==
  f a' b' `qed

-- 7. Докажите, что transport выражается через pmap и repl и наоборот.

-- repl говорит, что если у нас есть два равных типа, то у нас есть функция из одного во второй.
-- Определите repl через transport.

\func repl {A B : \Type} (p : A = B) (a : A) : B => transport (\lam T => T) p a


-- Определите transport через repl и pmap.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' => repl (pmap B p : B a = B a') b
