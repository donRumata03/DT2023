\import Data.Bool
\import Data.Maybe
\import Data.Or
\import Function.Meta
\import Logic
\import Paths
\import hw01 (fac)
\import hw10 ()
\import lect02 (List, cons, nil)

-- 1. Определите полиморфный tail для списков.

\func tail {A : \Type} (l : List A) : Maybe $ List A
  | List.nil => nothing
  | cons a l1 => just l1

-- 2. Реализуйте любой (but choose wisely) алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.

\func sort {A : \Type} (l : List A) (comparator : A -> A -> Bool) : List A \elim l -- Comparator a b ~> true <=> a < b
  | nil => nil
  | cons a t => insert a t comparator
  \where {
    \func insert {A : \Type} (e : A) (list : List A) (comparator : A -> A -> Bool) : List A \elim list
      | nil => cons e nil
      | cons a list => \case comparator e a \with {
        | false => cons a (insert e list comparator)
        | true => cons e (cons a list)
      }
  }


-- 3. Докажите ассоциативность && и ||.

\func boolIsTrueOrFalse (b : Bool) : Or (b = true) (b = false)
  | false => Or.inr idp
  | true => Or.inl idp

\func &&-assoc (x y z : Bool) : (x and y) and z = x and (y and z) =>
--  | true, true, true => idp
--  | true, true, false => idp
--  | true, false, true => idp
--  | true, false, false => idp
--  | false, true, true => idp
--  | false, true, false => idp
--  | false, false, true => idp
--  | false, false, false => idp
  -- Alternative proof:
  \case (boolIsTrueOrFalse ((x and y) and z)) \with {
    | Or.inl p => p *> (inv $ leftToRight p)
    | Or.inr p => {?}
  }
  \where {

    \func leftToSigma (x y z : Bool) (p : (x and y) and z = true) : \Sigma (x = true) (y = true) (z = true) =>
      \let (xAndYIsTrue : (x and y) = true, zIsTrue : z = true) => and.toSigma p \in
        \let (xIsTrue, yIsTrue) => and.toSigma xAndYIsTrue \in (xIsTrue, yIsTrue, zIsTrue)

    \func rightToSigma (x y z : Bool) (p : x and (y and z) = true) : \Sigma (x = true) (y = true) (z = true) =>
        \let (xIsTrue : x = true, yAndZIsTrue : y and z = true) => and.toSigma p \in
            \let (yIsTrue, zIsTrue) => and.toSigma yAndZIsTrue \in (xIsTrue, yIsTrue, zIsTrue)

    \func leftFromSigma (x y z : Bool) (p : \Sigma (x = true) (y = true) (z = true)) : (x and y) and z = true =>
      \let (xIsTrue, yIsTrue, zIsTrue) => p \in
        and.fromSigma (and.fromSigma (xIsTrue, yIsTrue), zIsTrue)

    \func rightFromSigma (x y z : Bool) (p : \Sigma (x = true) (y = true) (z = true)) : x and (y and z) = true =>
        \let (xIsTrue, yIsTrue, zIsTrue) => p \in
            and.fromSigma (xIsTrue, and.fromSigma (yIsTrue, zIsTrue))


    \func leftToRight {x y z : Bool} (p : (x and y) and z = true) : x and (y and z) = true =>
        rightFromSigma x y z $ leftToSigma x y z p

    \func rightToLeft {x y z : Bool} (p : x and (y and z) = true) : (x and y) and z = true =>
        leftFromSigma x y z $ rightToSigma x y z p


    \func leftToRight' (x y z : Bool) (p : (x and y) and z = false) : x and (y and z) = false =>
        {?}

    \func rightToLeft' (x y z : Bool) (p : x and (y and z) = false) : (x and y) and z = false =>
        {?}
  }

\func ||-assoc (x y z : Bool) : (x or y) or z = x or (y or z)
  | true, true, true => idp
  | true, true, false => idp
  | true, false, true => idp
  | true, false, false => idp
  | false, true, true => idp
  | false, true, false => idp
  | false, false, true => idp
  | false, false, false => idp

-- 4. Докажите, что fac 3 равно 6.

\func fac3Is6 : fac 3 = 6 => idp

-- 5. Докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t1 : (P and Q -> R) -> P -> Q -> R

\func t1 {P Q R : \Type} (f : \Sigma P Q -> R) (p : P) (q : Q) : R => f (p, q)

-- t2 : (P -> R) -> (Q -> R) -> P or Q -> R

\func t2 {P Q R : \Type} (f : P -> R) (g : Q -> R) (h : Or P Q) : R \elim h
  | inl a => f a
  | inr b => g b

-- t3 : ((P -> Q -> R) -> P) -> (P -> R) -> R

\func t3 {P Q R : \Type} (f : (P -> Q -> R) -> P) (g : P -> R) : R =>
  g $ f fArg
  \where {
    \func fArg (p : P) (_q : Q) : R => g p
  }

-- 6. Сформулируйте и докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t4 : (P -> Q -> R) -> P and Q -> R

\func t4 {P Q R : \Type} (f : P -> Q -> R) (s : \Sigma P Q) : R => f s.1 s.2

-- t5 : (P or Q -> P and Q) -> (P -> Q) and (Q -> P)

\func t5 {P Q : \Type} (f : (Or P Q) -> (\Sigma P Q)) : \Sigma (P -> Q) (Q -> P) => (
  \lam p => (f $ inl p).2,
  \lam q => (f $ inr q).1
)

-- t6 : ((((P -> Q) -> P) -> P) -> Q) -> Q

-- 7. Докажите следующие утверждения.

-- s1 : Если для любого x : Nat верно P(x), то существует x : Nat для которого P(x) верно.

\func s1 (P : Nat -> \Type) (h : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) => (0, h 0)

-- s2 : Если не существует x : Nat такого, что верно P(x), то P(3) не верно.

\func s2 (P : Nat -> \Type) (h : \Sigma (x : Nat) (P x) -> Empty) : P 3 -> Empty => \lam p3 => h (3, p3)

-- 8. Сформулируйте и докажите следующие утверждения.

-- s3 : Если для всех x : Nat верно, что P(x) влечет Q(x), и существует x : Nat для которого верно P(x), то существует x : Nat для которого верно Q(x).
\func s3 {P Q : Nat -> \Type} (p : \Pi (x : Nat) -> P x -> Q x) (e : \Sigma (x : Nat) (P x)) : \Sigma (x : Nat) (Q x) =>
  (e.1, p e.1 e.2)


-- s4 : Если для всех x : Nat либо не верно P(x), либо не верно Q(x), то P(3) влечет, что Q(3) не верно.
\func s4 {P Q : Nat -> \Type} (p : \Pi (x : Nat) -> Or (P x -> Empty) (Q x -> Empty)) : P 3 -> Q 3 -> Empty =>
  \lam pp qq => \case p 3 \with {
    | inl a => a pp
    | inr b => b qq
  }
