\import Algebra.Meta
\import Arith.Nat (NatSemiring)
\import Data.Bool
\import Data.List
\import Function.Meta
\import Logic
\import Logic.Meta
\import Meta
\import Paths
\import Paths.Meta
\import Set ()
\import Set.Hedberg
\import hw06 (unsuc)
\import lect02 ()
\import lect05 (funExt, unext)
\import lect06 (Decide, NatEq, So-dec, no, yes)
\import lect10
\import lect11 (NatDecEq, Set2-to-Set1', inc0)

-- 1. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g инъективны, то g `o` f также инъективна.
--    Докажите, что если g `o` f инъективна, то f также инъективна.

-- Композиция функций
\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-inj {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj f) (q : isInj g) : isInj (g `o` f) =>
  unfold (isInj, o) $ \lam g_o_f_eq => p $ q g_o_f_eq

\func o-inj' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj (g `o` f)) : isInj f =>
  unfold isInj \lam fx=fy => p $ pmap g fx=fy

-- 2. Определите предикат "делится на 3 или на 5" так, чтобы он возвращал утверждения.
--    Докажите, что MultipleOf3Or5 вкладывается в ℕ.

\func isMultipleOf3Or5 (n : Nat) : \Type => So $ mod3 n Set.DecSet.== 0 and mod5 n Set.DecSet.== 0

\lemma isMultipleOf3Or5-isProp (n : Nat) : isProp (isMultipleOf3Or5 n) => Path.inProp

\func MultipleOf3Or5 => \Sigma (n : Nat) (isMultipleOf3Or5 n)

\func Mul-inc (m : MultipleOf3Or5) => m.1

\func Mul-inc-isInj : isInj Mul-inc => unfold isInj \lam {x} {y} p => ext p -- Second element of pair is prop, so its elements are considered equal automatically

-- 3. Мы будем говорить, что тип A тривиален, если существует элемент в A, такой что любой другой элемент в A равен ему.
--    Докажите, что тип A тривиален тогда и только тогда, когда A является утверждением и A населен.

\func isTriv (A : \Type) => \Sigma (a : A) (\Pi (a' : A) -> a = a')

\func \infix 1 <-> (A B : \Type) => \Sigma (A -> B) (B -> A)

\func isTriv-lem (A : \Type) : isTriv A <-> (\Sigma (isProp A) A) => (isTriv->P&i A, P&i->isTriv A)
  \where {
    \func isTriv->P&i (A : \Type) : isTriv A -> \Sigma (isProp A) A => \lam (a, p) =>
        (\lam a' a'' => \let | p' => p a' | p'' => p a'' \in cong, a)

    \func P&i->isTriv (A : \Type) : \Sigma (isProp A) A -> isTriv A => \lam (prop, a) => (a, prop a)
  }

-- 4. Докажите, что Either не является утверждением в общем случаем.

\func Either-isProp (p : \Pi {A B : \Type} (pA : isProp A) (pB : isProp B) -> isProp (Or A B)) : Empty =>
  inl!=inr $ or-isProp v1 v2
  \where {
    \func v1 : Or Unit Unit => inl unit
    \func v2 : Or Unit Unit => inr unit
    \func or-isProp => p Unit'-isProp Unit'-isProp
    \func inl!=inr (p : inl unit = inr unit) : Empty => contradiction
  }

-- 5. Докажите, что LessOrEq является предикатом.

\data LessOrEq (n m : Nat) : \Set0 \with
  | 0, m => z<=n
  | suc n, suc m => s<=s (LessOrEq n m)

\func LessOrEq-isProp {n m : Nat} : isProp (LessOrEq n m) => \lam a a' => evaluate<=Prop a a'

\func evaluate<=Prop {n m : Nat} (a a' : LessOrEq n m) : a = a' \elim n, m, a, a'
  | 0, m1, z<=n, z<=n => idp
  | suc n1, suc m1, s<=s a1, s<=s a'1 => pmap s<=s $ evaluate<=Prop a1 a'1

-- 6. Докажте, что ReflClosure LessOrEq не является предикатом, а ReflClosure (\lam x y => T (x < y)) является.

\func \infix 4 < (n m : Nat) : Bool
  | _, 0 => false
  | 0, suc _ => true
  | suc n, suc m => n < m

\data ReflClosure (R : Nat -> Nat -> \Type) (x y : Nat)
  | refl (x = y)
  | inc (R x y)

\lemma Nat-isSet : isSet Nat => Dec-isSet NatEq.decideEq

\func ReflClosure_<-isProp (n m : Nat) : isProp (ReflClosure (\lam x y => So (x < y)) n m) => equate-ReflClosure_< n m
  \where {
    \func equate-ReflClosure_< (n m : Nat) (a a' : ReflClosure (\lam x y => So (x < y)) n m) : a = a' \elim n, m, a, a'
      | n, m, refl p, refl p' => pmap refl $ Nat-isSet n m p p'
      | n1, m1, inc a1, inc a'1 => pmap inc $ Path.inProp _ _
      | n1, m1, refl p, inc r => absurd $ not-less-and-eq r p
      | n1, m1, inc a1, refl p => absurd $ not-less-and-eq a1 p

    \func not-less-and-eq {n m : Nat} (a : So (n < m)) (p : n = m) : Empty
      | {0}, {0}, (), p
      | {suc n1}, {suc m1}, a, p => not-less-and-eq a (unsuc p)
  }

\func ReflClosure_<=-isNotProp (p : \Pi (n m : Nat) -> isProp (ReflClosure LessOrEq n m)) : Empty =>
  p1!=p2 $ p n m p1 p2
  \where {
    \func n => 0
    \func m => 0
    \func p1 : ReflClosure LessOrEq n m => refl idp
    \func p2 : ReflClosure LessOrEq n m => inc $ z<=n
    \func p1!=p2 (pp : p1 = p2) : Empty => contradiction
  }

-- 7. Докажите, что если тип A вкладывается в тип B и B является утверждением, то и A является утверждением.

\func sub-isProp {A B : \Type} (f : A -> B) (p : isInj f) (q : isProp B) : isProp A => \lam a a' => p $ q _ _

-- 8. Докажите, что тип с разрешимым равенством являетя множеством.

\func dec2Bool {A : \Type} (d : Decide A) : Bool
  | yes _ => true
  | no _ => false

\lemma Dec-isSet {A : \Type} (dec : \Pi (x y : A) -> Decide (x = y)) : isSet A =>
  Set-lemma
    (\lam x y => So $ dec2Bool $ dec x y)
    (\lam {a} => cases (dec a a) \with {
      | yes a1 => ()
      | no _x => contradiction
    })
    (\lam {a} {a'} s => cases (dec a a', s) \with {
      | yes a1, s1 => a1
    })

-- 9. Если A и B являются множествами, то A `Or` B тоже является множеством.

\data \fixr 2 Or (A B : \Type)
  | inl A
  | inr B

\data OrEquality (A B : \Set) {-(p : isSet A) (q : isSet B)-} (x y : Or A B) : \Prop \elim x, y
  | inl l1, inl l2 => Left (l1 = l2)
  | inr r1, inr r2 => Right (r1 = r2)
  \where {
  -- Could be as an exliplicit proof
--    \use \level OrEquality-isProp {A B : \Type} {p : isSet A} {q : isSet B} {x y : Or A B} (orEq1 orEq2 : OrEquality A B p q x y) : orEq1 = orEq2
--      | {A1}, {B1}, {p1}, {q1}, {inl l1}, {inl l2}, Left p2, Left p3 => pmap Left $ p1 l1 l2 p2 p3
--      | {A1}, {B1}, {p1}, {q1}, {inr r1}, {inr r2}, Right p2, Right p3 => pmap Right $ q1 r1 r2 p2 p3
  }

\func wrapSets {A B : \Type} {p : isSet A} {q : isSet B} (or : Or A B) : Or (Set2-to-Set1' A p) (Set2-to-Set1' B q) => \case p, q, or \with {
  | p, q, inl a => inl $ inc0 a
  | p, q, inr b => inr $ inc0 b
}

\lemma or-isSet {A B : \Set} : isSet (Or A B) => Set-lemma
-- Could be wrapSets for conversion to \Set
--  (\lam or1 or2 => OrEquality (Set2-to-Set1' A p) (Set2-to-Set1' B q) (wrapSets or1) (wrapSets or2))
  (\lam or1 or2 => OrEquality A B or1 or2)
  (\lam {a} => cases a \with {
    | inl a1 => Left idp
    | inr b => Right idp
  } )
  (\lam {a} {a'} orEq => cases (a, a', orEq) \with {
    | inl l1, inl l2, Left p1 => pmap inl p1
    | inr r1, inr r2, Right p1 => pmap inr p1
  })

-- 10. Если B x является множеством, то \Pi (x : A) -> B x тоже является множеством.

\data FuncEq {A : \Type} (B : A -> \Set) (p : \Pi (x : A) -> isSet (B x)) (f g : \Pi (x : A) -> B x) : \Prop
  | funcEq (\Pi (x : A) -> f x = g x)
  \where {
    \use \level FuncEq-isProp {A : \Type} {B : A -> \Set} {p : \Pi (x : A) -> isSet (B x)} {f g : \Pi (x : A) -> B x} (funcEq1 funcEq2 : FuncEq B p f g) : funcEq1 = funcEq2
      | {A1}, {B1}, {p}, {f1}, {g1}, funcEq f', funcEq g' => pmap {\Pi (x : A1) -> f1 x = g1 x} funcEq $ funExt \lam x => p x _ _ _ _
  }

\lemma pi-isSet {A : \Type} (B : A -> \Set) (p : \Pi (x : A) -> isSet (B x)) : isSet (\Pi (x : A) -> B x) => Set-lemma {\Pi (x : A) -> B x}
  (\lam f g => FuncEq B p f g)
  (\lam {a} => funcEq $ unext idp)
  (\lam {a} {a'} f => ext $ \case f \with {
    | funcEq _x => _x
  } )

-- 11. Докажите, что если A является множеством, то List A также им является.

\data ListEq {A : \Set} (p : isSet A) (l1 l2 : List A) : \Prop \elim l1, l2
  | List.nil, List.nil => nil-eq
  | a List.:: as, b List.:: bs => cons-eq (a = b) (ListEq p as bs)

\lemma List-isSet {A : \Set} (pA : isSet A) : isSet (List A)
  => Set-lemma
    (\lam l1 l2 => ListEq pA l1 l2)
    (\lam {a} => from=-toListEq pA a)
    (\lam {a} {a'} lEq => fromListEq-to-= pA a a' lEq)
  \where {
    \func fromListEq-to-= (pA : isSet A) (l1 l2 : List A) (lEq : ListEq pA l1 l2) : l1 = l2 \elim l1, l2, lEq
      | List.nil, List.nil, nil-eq => idp
      | a List.:: as, b List.:: bs, cons-eq aEq asEq => pmap2 (List.::) aEq $ fromListEq-to-= pA as bs asEq

    \func from=-toListEq (pA : isSet A) (l : List A) : ListEq pA l l \elim l
      | nil => nil-eq
      | a :: l => cons-eq idp $ from=-toListEq pA l
  }

-- Optional:
-- 12. Докажите, что n-типы замкнуты относительно образования \Pi-типов.
--     Hint: Доказательство по индукции. Для случая suc n нужно доказать, что если f,g : \Pi (x : A) -> B x, то f = g эквивалентно \Pi (x : A) -> f x = g x.

\func levelPi {A : \Type} (B : A -> \Type) (n : Nat) (p : \Pi (x : A) -> B x `hasLevel` n) : (\Pi (x : A) -> B x) `hasLevel` n => {?}