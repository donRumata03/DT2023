\import Arith.Nat
\import Data.List
\import Function.Meta
\import Logic
\import Meta
\import Paths
\import Paths.Meta
\import hw06 (In, contrProp)
\import lect05
\import lect12

-- 1. Определите функцию negPred : Int -> Int такую, что negPred x = x, если x > 0, и negPred x = x - 1, если x <= 0.

\func negPred (x : Int) : Int
  | pos (suc n) => suc n
  | 0 => -1
  | neg n => neg $ suc n

-- 2. Определите функции сложения и умножения для Int.

\func \infixl 6 + (x y : Int) : Int \elim y
  | pos (suc y') => ++ $ x + y'
  | 0 => x
  | neg (suc y') => -one $ x + neg y'
  \where {
    \func ++ (x : Int) : Int
      | pos x => suc x
      | neg (suc x) => neg x

    \func -one (x : Int) : Int
      | pos (suc x) => x
      | neg x => neg (suc x)
      | 0 => -1
  }

\func \infixl 7 * (x y : Int) : Int \elim y
  | pos (suc y') => x + x * y'
  | 0 => 0
  | neg (suc y') => negate x + x * neg y'
  \where {
    \func negate (x : Int) : Int
      | pos x => neg x
      | neg x => x
  }

-- 3. Определите тип данных BinNat для бинарных натуральных чисел.
--    У него должно быть три конструктора: для 0, для чисел вида 2*n и чисел вида 2*n+1.
--    Такой тип данных содержит несколько различных представлений для нуля.
--    Используйте типы данных с условиями, чтобы вычислительно отождествить различные нули.

\data BinNat : \Set
  | zero
  | even BinNat \with {
    | zero => zero
  }
  | odd BinNat

-- 4. Докажите, что функция pred сюръективна.

\func pred (n : Nat) : Nat
  | 0 => 0
  | suc n => n

\func pred-is-sur : isSur pred => \lam b => inP (suc b, idp)

-- 5. Докажите, что функция suc не сюръективна.

\func suc-is-not-sur (p : isSur suc) : Empty => \let a => p 0 \in \case a \with {
  | inP a1 => suc/=0 a1.2
}

-- 6. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g сюръективны, то g `o` f также сюръективна.
--    Докажите, что если g `o` f сюръективна, то g также сюръективна.

\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-sur {A B C : \Type} (f : A -> B) (g : B -> C) (p : isSur f) (q : isSur g) : isSur (g `o` f) => \lam c => unfold o $ \case q c \with {
  | inP (b, qq) => \case p b \with {
    | inP (a, pp) => inP (a, rewrite pp qq)
  }
}

\func o-sur' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isSur (g `o` f)) : isSur g => \lam c => \case p c \with {
  | inP (a, q) => inP (f a, q)
}

-- 7. Определите множество конечных подмножеств множества A, то есть списков элементов A с точностью до перестановок и повторений элементов.

\func Set (A : \Set) : \Set => Quotient (List A) (\lam xs ys => \Pi (x : A) -> (TruncP $ In x xs) <-> (TruncP $ In x ys))


-- 8. Докажите теорему Кантора.

-- Теорема Кантора говорит, что для любого множества A мощность множества его подмножеств строго больше, чем мощность A.

-- Множество подмножеств можно определить следующим образом:

\func Subs (A : \Set) => A -> \Prop

-- Формально утверждение теоремы Кантора состоит из двух частей:
-- "существует инъекция из A в Subs A" и "не существует сюръекции из A в Subs A".

\func cantor1 (A : \Set) : \Sigma (f : A -> Subs A) (isInj f)
  => (=, \lam x y p => \let | pp => pmap (\lam f => f x) p
                            | eq => (=) x \in inv $ coe0 pp idp)

\func cantor2 (A : \Set) (f : A -> Subs A) (p : isSur f) : Empty
  => \case unachievable-set-is-achieved \with {
    | inP (a, q) => \let a-in-self=unachievable-set => pmap (__ a) q
                    \in contrProp {unachievable-set a}
        (\lam u => \let | a-in-fa => coe0 (inv a-in-self=unachievable-set) u
                        | notfaa : Not $ f a a => u \in \lam u1 => notfaa a-in-fa)
        (\lam n a-in-self => n $ coe0 a-in-self=unachievable-set a-in-self)
  }
  \where {
    -- Contains x iff x doesn't lie in f x
    \func unachievable-set => \lam a => Not (f a a)
    \func unachievable-set-is-achieved => p unachievable-set
  }

-- Optional
-- 9. Постройте функции Nat -> BinNat и BinNat -> Nat и докажите, что они взаимно обратны.

\func NatToBinNat (n : Nat) : BinNat => {?}

\func BinNatToNat (b : BinNat) : Nat => {?}

\func nbn (n : Nat) : BinNatToNat (NatToBinNat n) = n => {?}

\func bnb (b : BinNat) : NatToBinNat (BinNatToNat b) = b => {?}
