-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/download
--    В IDEA можно просто импортировать данный проект.

-- 2. Определите аналоги следующих функций на языке хаскелл.
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}
\func second (_ y : Nat) : Nat => y
\func apply (f : Nat -> Nat) (x : Nat) : Nat => f x
--\func compose (f g : Nat -> Nat) : Nat -> Nat => \lam x => f (g x)
\func compose (f g : Nat -> Nat) (x : Nat) : Nat => f (g x)
\func flip (f : Nat -> Nat -> Nat) (x : Nat) (y : Nat) : Nat => f y x

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\import lect01 \hiding (+,*)

\func f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infix 0 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infix 1 f5 => f1
\func f6 => f4

\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}

\func if (cond t e : Bool) : Bool \elim cond
  | true => t
  | false => e
-- 5. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x true y

-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-,div) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0 => 1
  | suc y => x * x ^ y

\func fac (x : Nat) : Nat \elim x {
  | 0 => 1
  | suc y => suc y * fac y
}
-- 7. Определите mod и gcd.

\func mod (x y : Nat) => x - y * div x y

\func max (x y : Nat) : Nat => \case (x `<` y) \with {
  | false => x
  | true => y
}
\func min (x y : Nat) : Nat => \case (x `<` y) \with {
  | false => y
  | true => x
}
\func gcd (x y : Nat) : Nat => gcd' (y + 10) (max x y) (min x y) \where {
  \func gcd' (fuel x y : Nat) : Nat \elim fuel, y {
    | 0, _ => 0
    | suc fuel, 0 => x
    | suc fuel, suc n => gcd' fuel (suc n) (x `mod` suc n)
  }
}
\func modTest1 : mod 100 5 = 0 => idp
\func modTest2 : mod 125 100 = 25 => idp
\func gcdTest1 : gcd 100 5 = 5 => idp
\func gcdTest2 : gcd 100 125 = 25 => idp
